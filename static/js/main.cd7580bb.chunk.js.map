{"version":3,"sources":["components/Pixel.js","components/Row.js","components/DrawingPanel.js","components/Editor.js","components/App.js","index.js"],"names":["Pixel","props","selectedColor","useState","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","className","onClick","onMouseEnter","onMouseLeave","style","backgroundColor","Row","width","height","pixels","i","push","DrawingPanel","rows","console","log","id","Editor","panelWidth","setPanelWidth","panelHeight","hideOptions","setHideOptions","hideDrawingPanel","setHideDrawingPanel","buttonText","setButtonText","setColor","type","defaultValue","onChange","e","target","value","color","onChangeComplete","hex","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAgCeA,G,qBA9BD,SAACC,GAAW,IAChBC,EAAkBD,EAAlBC,cADe,EAEaC,mBAAS,QAFtB,mBAEhBC,EAFgB,KAEJC,EAFI,OAGSF,mBAASC,GAHlB,mBAGhBE,EAHgB,KAGNC,EAHM,OAIqBJ,oBAAS,GAJ9B,mBAIhBK,EAJgB,KAIAC,EAJA,KAmBvB,OACE,qBACEC,UAAU,QACVC,QAjBJ,WACEN,EAAcH,GACdO,GAAkB,IAgBhBG,aAdJ,WACEL,EAAYH,GACZC,EAAcH,IAaZW,aAXJ,WACML,GACFH,EAAcC,GAEhBG,GAAkB,IAQhBK,MAAO,CAAEC,gBAAiBX,OCfjBY,EATH,SAACf,GAGX,IAHsB,IACdgB,EAAiChB,EAAjCgB,MAAef,GAAkBD,EAA1BiB,OAA0BjB,EAAlBC,eACnBiB,EAAS,GACJC,EAAI,EAAGA,EAAIH,EAAOG,IACzBD,EAAOE,KAAK,cAAC,EAAD,CAAenB,cAAeA,GAAlBkB,IAE1B,OAAO,qBAAKV,UAAU,MAAf,SAAsBS,KCShBG,EAfM,SAACrB,GAAW,IACvBgB,EAAiChB,EAAjCgB,MAAOC,EAA0BjB,EAA1BiB,OAAQhB,EAAkBD,EAAlBC,cACnBqB,EAAO,GACXC,QAAQC,IAAIF,GACZ,IAAK,IAAIH,EAAI,EAAGA,EAAIF,EAAQE,IAC1BG,EAAKF,KAAK,cAAC,EAAD,CAAaJ,MAAOA,EAAOf,cAAeA,GAAhCkB,IAGtB,OACE,qBAAKM,GAAG,eAAR,SACE,qBAAKA,GAAG,SAAR,SAAkBH,OCqDTI,EA7DA,WAAO,IAAD,EACiBxB,mBAAS,IAD1B,mBACZyB,EADY,KACAC,EADA,OAEmB1B,mBAAS,IAF5B,mBAEZ2B,EAFY,aAGmB3B,oBAAS,IAH5B,mBAGZ4B,EAHY,KAGCC,EAHD,OAI6B7B,oBAAS,GAJtC,mBAIZ8B,EAJY,KAIMC,EAJN,OAKiB/B,mBAAS,iBAL1B,mBAKZgC,EALY,KAKAC,EALA,OAMejC,mBAAS,WANxB,mBAMZD,EANY,KAMGmC,EANH,KAiBnB,OACE,sBAAKX,GAAG,SAAR,UACE,8CACCO,GAAoB,wDACpBA,GACC,qBAAKP,GAAG,UAAR,SACE,sBAAKhB,UAAU,SAAf,UACE,uBACE4B,KAAK,SACL5B,UAAU,aACV6B,aAAcX,EACdY,SAAU,SAACC,GACTZ,EAAcY,EAAEC,OAAOC,UAG3B,yCACA,uBACEL,KAAK,SACL5B,UAAU,aACV6B,aAAcT,IAGhB,+CAIN,wBAAQnB,QApCZ,WACEqB,GAAgBD,GAChBG,GAAqBD,GAEjBG,EADW,kBAAfD,EACkB,QACA,kBA+BwBzB,UAAU,SAAlD,SACGyB,IAGFJ,GACC,cAAC,IAAD,CAAca,MAAO1C,EAAe2C,iBAlC1C,SAAqBD,GACnBP,EAASO,EAAME,QAmCZf,GACC,cAAC,EAAD,CACEd,MAAOW,EACPV,OAAQY,EACR5B,cAAeA,QChDV6C,MARf,WACE,OACE,qBAAKrC,UAAU,MAAf,SACE,cAAC,EAAD,O,OCDNsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.cd7580bb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../styles/pixel.scss\";\nconst Pixel = (props) => {\n  const { selectedColor } = props;\n  const [pixelColor, setPixelColor] = useState(\"#fff\");\n  const [oldColor, setOldColor] = useState(pixelColor);\n  const [canChangeColor, setCanChangeColor] = useState(true);\n  function applyColor() {\n    setPixelColor(selectedColor);\n    setCanChangeColor(false);\n  }\n  function changeColorOnHover() {\n    setOldColor(pixelColor);\n    setPixelColor(selectedColor);\n  }\n  function resetColor() {\n    if (canChangeColor) {\n      setPixelColor(oldColor);\n    }\n    setCanChangeColor(true);\n  }\n  return (\n    <div\n      className=\"pixel\"\n      onClick={applyColor}\n      onMouseEnter={changeColorOnHover}\n      onMouseLeave={resetColor}\n      style={{ backgroundColor: pixelColor }}\n    ></div>\n  );\n};\n\nexport default Pixel;\n","import React from \"react\";\nimport \"../styles/row.scss\";\nimport Pixel from \"./Pixel\";\nconst Row = (props) => {\n  const { width, height, selectedColor } = props;\n  let pixels = [];\n  for (let i = 0; i < width; i++) {\n    pixels.push(<Pixel key={i} selectedColor={selectedColor} />);\n  }\n  return <div className=\"row\">{pixels}</div>;\n};\n\nexport default Row;\n","import React from \"react\";\nimport \"../styles/drawingPanel.scss\";\nimport Row from \"./Row\";\nconst DrawingPanel = (props) => {\n  const { width, height, selectedColor } = props;\n  let rows = [];\n  console.log(rows);\n  for (let i = 0; i < height; i++) {\n    rows.push(<Row key={i} width={width} selectedColor={selectedColor} />);\n  }\n\n  return (\n    <div id=\"drawingPanel\">\n      <div id=\"pixels\">{rows}</div>\n    </div>\n  );\n};\n\nexport default DrawingPanel;\n","import React, { useState } from \"react\";\nimport \"../styles/editor.scss\";\nimport { CirclePicker } from \"react-color\";\nimport DrawingPanel from \"./DrawingPanel\";\n\nconst Editor = () => {\n  const [panelWidth, setPanelWidth] = useState(16);\n  const [panelHeight, setPanelHeight] = useState(16);\n  const [hideOptions, setHideOptions] = useState(false);\n  const [hideDrawingPanel, setHideDrawingPanel] = useState(true);\n  const [buttonText, setButtonText] = useState(\"start drawing\");\n  const [selectedColor, setColor] = useState(\"#f44336\");\n  function intializeDrawingPanel() {\n    setHideOptions(!hideOptions);\n    setHideDrawingPanel(!hideDrawingPanel);\n    buttonText === \"start drawing\"\n      ? setButtonText(\"reset\")\n      : setButtonText(\"start drawing\");\n  }\n  function changeColor(color) {\n    setColor(color.hex);\n  }\n  return (\n    <div id=\"editor\">\n      <h1>8bit Painter</h1>\n      {hideDrawingPanel && <h2>Enter Panel Dimensions</h2>}\n      {hideDrawingPanel && (\n        <div id=\"options\">\n          <div className=\"option\">\n            <input\n              type=\"number\"\n              className=\"panelInput\"\n              defaultValue={panelWidth}\n              onChange={(e) => {\n                setPanelWidth(e.target.value);\n              }}\n            />\n            <span>Width</span>\n            <input\n              type=\"number\"\n              className=\"panelInput\"\n              defaultValue={panelHeight}\n              //onChange={}\n            />\n            <span>Height</span>\n          </div>\n        </div>\n      )}\n      <button onClick={intializeDrawingPanel} className=\"button\">\n        {buttonText}\n      </button>\n\n      {hideOptions && (\n        <CirclePicker color={selectedColor} onChangeComplete={changeColor} />\n      )}\n      {hideOptions && (\n        <DrawingPanel\n          width={panelWidth}\n          height={panelHeight}\n          selectedColor={selectedColor}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Editor;\n","import \"../styles/App.scss\";\nimport Editor from \"./Editor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./components/App\";\nimport \"nes.css/css/nes.min.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}