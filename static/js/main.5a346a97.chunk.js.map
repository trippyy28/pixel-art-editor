{"version":3,"sources":["components/context/context.js","components/Pixel.js","components/Row.js","components/DrawingPanel.js","components/Editor.js","components/App.js","index.js"],"names":["MyContext","React","createContext","Pixel","props","selectedColor","useState","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","isBlank","useContext","setIsBlank","useEffect","className","onClick","onMouseEnter","onMouseLeave","style","backgroundColor","Row","width","height","pixels","console","log","i","push","DrawingPanel","resetArt","panelRef","useRef","rows","id","ref","git","exportComponentAsPNG","Editor","panelWidth","setPanelWidth","panelHeight","hideOptions","setHideOptions","hideDrawingPanel","setHideDrawingPanel","buttonText","setButtonText","setColor","type","defaultValue","onChange","e","target","value","color","onChangeComplete","hex","App","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a346a97.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const MyContext = React.createContext();\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { MyContext } from \"./context/context\";\n\nimport \"../styles/pixel.scss\";\nconst Pixel = (props) => {\n  const { selectedColor } = props;\n  const [pixelColor, setPixelColor] = useState(\"#fff\");\n  const [oldColor, setOldColor] = useState(pixelColor);\n  const [canChangeColor, setCanChangeColor] = useState(true);\n  const { isBlank } = useContext(MyContext);\n  const { setIsBlank } = useContext(MyContext);\n\n  useEffect(() => {\n    if (isBlank) {\n      setPixelColor(\"#fff\");\n    }\n    setIsBlank(false);\n  }, [isBlank]);\n\n  function applyColor() {\n    setPixelColor(selectedColor);\n    setCanChangeColor(false);\n  }\n  function changeColorOnHover() {\n    setOldColor(pixelColor);\n    setPixelColor(selectedColor);\n  }\n  function resetColor() {\n    if (canChangeColor) {\n      setPixelColor(oldColor);\n    }\n    setCanChangeColor(true);\n  }\n  return (\n    <div\n      className=\"pixel\"\n      onClick={applyColor}\n      onMouseEnter={changeColorOnHover}\n      onMouseLeave={resetColor}\n      style={{ backgroundColor: pixelColor }}\n    ></div>\n  );\n};\n\nexport default Pixel;\n","import React from \"react\";\nimport \"../styles/row.scss\";\nimport Pixel from \"./Pixel\";\nconst Row = (props) => {\n  const { width, height, selectedColor, isBlank } = props;\n  let pixels = [];\n  console.log(isBlank);\n  console.log(pixels);\n  console.log(selectedColor);\n\n  for (let i = 0; i < width; i++) {\n    pixels.push(\n      <Pixel key={i} selectedColor={selectedColor} isBlank={isBlank} />\n    );\n  }\n\n  return <div className=\"row\">{pixels}</div>;\n};\nexport default Row;\n","import React, { useRef } from \"react\";\nimport \"../styles/drawingPanel.scss\";\nimport Row from \"./Row\";\nimport { exportComponentAsPNG } from \"react-component-export-image\";\n\nconst DrawingPanel = (props) => {\n  const { width, height, selectedColor, resetArt, isBlank } = props;\n\n  const panelRef = useRef();\n  let rows = [];\n  console.log(rows);\n  for (let i = 0; i < height; i++) {\n    rows.push(\n      <Row\n        key={i}\n        width={width}\n        height={height}\n        selectedColor={selectedColor}\n        resetArt={resetArt}\n        isBlank={isBlank}\n      />\n    );\n  }\n\n  return (\n    <div id=\"drawingPanel\">\n      <div id=\"pixels\" ref={panelRef} git>\n        {rows}\n      </div>\n      <button onClick={() => exportComponentAsPNG(panelRef)} className=\"button\">\n        Export as PNG\n      </button>\n    </div>\n  );\n};\n\nexport default DrawingPanel;\n","import React, { useState, useContext } from \"react\";\nimport \"../styles/editor.scss\";\nimport { BlockPicker } from \"react-color\";\nimport DrawingPanel from \"./DrawingPanel\";\nimport { MyContext } from \"./context/context\";\n\nconst Editor = () => {\n  const [panelWidth, setPanelWidth] = useState(16);\n  const [panelHeight, setPanelHeight] = useState(16);\n  const [hideOptions, setHideOptions] = useState(false);\n  const [hideDrawingPanel, setHideDrawingPanel] = useState(true);\n  const [buttonText, setButtonText] = useState(\"start drawing\");\n  const [selectedColor, setColor] = useState(\"#f44336\");\n  const [resetArt, setResetArt] = useState(false);\n  const { isBlank } = useContext(MyContext);\n  const { setIsBlank } = useContext(MyContext);\n  function intializeDrawingPanel() {\n    setHideOptions(!hideOptions);\n    setHideDrawingPanel(!hideDrawingPanel);\n    buttonText === \"start drawing\"\n      ? setButtonText(\"reset\")\n      : setButtonText(\"start drawing\");\n  }\n  function changeColor(color) {\n    setColor(color.hex);\n  }\n\n  return (\n    <div id=\"editor\">\n      <h1>8bit Painter</h1>\n      {hideDrawingPanel && <h2>Enter Panel Dimensions</h2>}\n      {hideDrawingPanel && (\n        <div id=\"options\">\n          <div className=\"option\">\n            <input\n              type=\"number\"\n              className=\"panelInput\"\n              defaultValue={panelWidth}\n              onChange={(e) => {\n                setPanelWidth(e.target.value);\n              }}\n            />\n            <span>Width</span>\n            <input\n              type=\"number\"\n              className=\"panelInput\"\n              defaultValue={panelHeight}\n              //onChange={}\n            />\n            <span>Height</span>\n          </div>\n        </div>\n      )}\n      <button onClick={intializeDrawingPanel} className=\"button\">\n        {buttonText}\n      </button>\n      {!hideDrawingPanel && (\n        <button onClick={() => setIsBlank(!isBlank)} className=\"button\">\n          Blank\n        </button>\n      )}\n\n      {hideOptions && (\n        <BlockPicker color={selectedColor} onChangeComplete={changeColor} />\n      )}\n      {hideOptions && (\n        <DrawingPanel\n          width={panelWidth}\n          height={panelHeight}\n          selectedColor={selectedColor}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Editor;\n","import \"../styles/App.scss\";\nimport Editor from \"./Editor\";\nimport { MyContext } from \"./context/context\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [isBlank, setIsBlank] = useState(false);\n  return (\n    <MyContext.Provider value={{ isBlank, setIsBlank }}>\n      <div className=\"App\">\n        <Editor />\n      </div>\n    </MyContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./components/App\";\nimport \"nes.css/css/nes.min.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}